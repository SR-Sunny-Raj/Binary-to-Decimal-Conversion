class Solution {
public:
    vector<vector<vector<int>>> dp;
    int solve(vector<int> &v,int k,int i,int f)
    {
        if(i>=v.size() or k<=0)return 0;
        if(dp[i][k][f]!=-1)return dp[i][k][f];
        if(!f)
        {
            return dp[i][k][f] = max(solve(v,k,i+1,1)-v[i],solve(v,k,i+1,0));
        }
        else
        {
            return dp[i][k][f] = max(solve(v,k-1,i+1,0)+v[i],solve(v,k,i+1,1));            
        }
    }
    int maxProfit(int k, vector<int>& v) {
        int n = v.size();
        dp = vector<vector<vector<int>>>(n+1,vector<vector<int>>(k+1,vector<int>(2,-1)));
        return solve(v,k,0,0);
    }
};
